scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "D. Turbidity", limits = c(0, 5000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
interpolate_var <- function(df, varname) {
df <- df %>% filter(!is.na(.data[[varname]]))
time_origin <- min(df$SamplingDateTime)
time_numeric <- as.numeric(difftime(df$SamplingDateTime, time_origin, units = "hours"))
# Force interpolation to match full plotting range
time_range_hours <- as.numeric(difftime(
ymd_hm("2025-06-06 15:30"),
ymd_hm("2025-06-04 16:15"),
units = "hours"
))
time_grid <- seq(
from = 0,
to = time_range_hours,
length.out = 200
)
depth_grid <- seq(0, max(df$Depth), length.out = 100)
interp_result <- interp(
x = time_numeric,
y = df$Depth,
z = df[[varname]],
xo = time_grid,
yo = depth_grid,
duplicate = "mean",
linear = TRUE,
extrap = TRUE
)
expand.grid(x = interp_result$x, y = interp_result$y) %>%
mutate(
SamplingDateTime = ymd_hm("2025-06-04 15:30") + dhours(x),
Depth = y,
!!varname := as.vector(interp_result$z)
) %>%
select(SamplingDateTime, Depth, all_of(varname))
}
df_temp <- interpolate_var(df_all, "Temp")
df_odo  <- interpolate_var(df_all, "ODO.1")
df_orp  <- interpolate_var(df_all, "ORP")
df_pH   <- interpolate_var(df_all, "pH")
df_turb <- interpolate_var(df_all, "Turbidity")
make_heatmap_clean <- function(df, var, var_label, title = NULL, limits = NULL) {
time_seq <- seq(from = ymd_hm("2025-06-04 16:00"),
to   = ymd_hm("2025-06-06 16:00"),
by   = "4 hours")
ggplot(df, aes(x = SamplingDateTime, y = Depth, fill = .data[[var]])) +
geom_tile() +
scale_y_reverse(
breaks = seq(0, 7.3, by = 1),
limits = c(7.3, 0),
expand = c(0, 0)
) +
scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "D. Turbidity", limits = c(0, 5000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
interpolate_var <- function(df, varname) {
df <- df %>% filter(!is.na(.data[[varname]]))
time_origin <- min(df$SamplingDateTime)
time_numeric <- as.numeric(difftime(df$SamplingDateTime, time_origin, units = "hours"))
# Make interpolation match full range
time_range_hours <- as.numeric(difftime(
ymd_hm("2025-06-06 15:30"),
ymd_hm("2025-06-04 16:00"),
units = "hours"
))
time_grid <- seq(
from = 0,
to = time_range_hours,
length.out = 200
)
depth_grid <- seq(0, max(df$Depth), length.out = 100)
interp_result <- interp(
x = time_numeric,
y = df$Depth,
z = df[[varname]],
xo = time_grid,
yo = depth_grid,
duplicate = "mean",
linear = TRUE,
extrap = TRUE
)
expand.grid(x = interp_result$x, y = interp_result$y) %>%
mutate(
SamplingDateTime = ymd_hm("2025-06-04 15:30") + dhours(x),
Depth = y,
!!varname := as.vector(interp_result$z)
) %>%
select(SamplingDateTime, Depth, all_of(varname))
}
df_temp <- interpolate_var(df_all, "Temp")
df_odo  <- interpolate_var(df_all, "ODO.1")
df_orp  <- interpolate_var(df_all, "ORP")
df_pH   <- interpolate_var(df_all, "pH")
df_turb <- interpolate_var(df_all, "Turbidity")
make_heatmap_clean <- function(df, var, var_label, title = NULL, limits = NULL) {
time_seq <- seq(from = ymd_hm("2025-06-04 16:00"),
to   = ymd_hm("2025-06-06 16:00"),
by   = "4 hours")
ggplot(df, aes(x = SamplingDateTime, y = Depth, fill = .data[[var]])) +
geom_tile() +
scale_y_reverse(
breaks = seq(0, 7.3, by = 1),
limits = c(7.3, 0),
expand = c(0, 0)
) +
scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "D. Turbidity", limits = c(0, 5000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 3000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 2000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 1000))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 750))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
# Combine into a 2x2 grid with separate legends
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
make_heatmap_clean <- function(df, var, var_label, title = NULL, limits = NULL) {
time_seq <- seq(from = ymd_hm("2025-06-04 16:00"),
to   = ymd_hm("2025-06-06 16:00"),
by   = "4 hours")
ggplot(df, aes(x = SamplingDateTime, y = Depth, fill = .data[[var]])) +
geom_tile() +
scale_y_reverse(
breaks = seq(0, 7.3, by = 1),
limits = c(7.3, 0),
expand = c(0, 0)
) +
scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
limits = c(ymd_hm("2025-06-04 16:00"), ymd_hm("2025-06-06 16:00") + dhours(1)),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH | p_turb) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
# Combine into a 2x2 grid with separate legends
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
interpolate_var <- function(df, varname) {
df <- df %>% filter(!is.na(.data[[varname]])) # remove rows where varname is NA
time_origin <- min(df$SamplingDateTime)
time_numeric <- as.numeric(difftime(df$SamplingDateTime, time_origin, units = "hours"))
# Make interpolation match full range
time_range_hours <- as.numeric(difftime(
ymd_hm("2025-06-06 15:30"),
ymd_hm("2025-06-04 16:00"),
units = "hours"
))
time_grid <- seq(
from = 0,
to = time_range_hours,
length.out = 300
)
depth_grid <- seq(0, max(df$Depth), length.out = 150)
interp_result <- interp(
x = time_numeric,
y = df$Depth,
z = df[[varname]],
xo = time_grid,
yo = depth_grid,
duplicate = "mean",
linear = TRUE,
extrap = TRUE
)
expand.grid(x = interp_result$x, y = interp_result$y) %>%
mutate(
SamplingDateTime = ymd_hm("2025-06-04 15:30") + dhours(x),
Depth = y,
!!varname := as.vector(interp_result$z)
) %>%
select(SamplingDateTime, Depth, all_of(varname))
}
df_temp <- interpolate_var(df_all, "Temp")
df_odo  <- interpolate_var(df_all, "ODO.1")
df_orp  <- interpolate_var(df_all, "ORP")
df_pH   <- interpolate_var(df_all, "pH")
df_turb <- interpolate_var(df_all, "Turbidity")
make_heatmap_clean <- function(df, var, var_label, title = NULL, limits = NULL) {
time_seq <- seq(from = ymd_hm("2025-06-04 16:00"),
to   = ymd_hm("2025-06-06 16:00"),
by   = "4 hours")
ggplot(df, aes(x = SamplingDateTime, y = Depth, fill = .data[[var]])) +
geom_tile() +
scale_y_reverse(
breaks = seq(0, 7.3, by = 1),
limits = c(7.3, 0),
expand = c(0, 0)
) +
scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
limits = c(ymd_hm("2025-06-04 16:00"), ymd_hm("2025-06-06 16:00") + dhours(1)),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
interpolate_var <- function(df, varname) {
df <- df %>% filter(!is.na(.data[[varname]])) # remove rows where varname is NA
time_origin <- min(df$SamplingDateTime)
time_numeric <- as.numeric(difftime(df$SamplingDateTime, time_origin, units = "hours"))
# Make interpolation match full range
time_range_hours <- as.numeric(difftime(
ymd_hm("2025-06-06 15:30"),
ymd_hm("2025-06-04 16:00"),
units = "hours"
))
# time axis divided into 300 evenly spaced points
time_grid <- seq(
from = 0,
to = time_range_hours,
length.out = 400
)
# depth axis divided into 150 evenly spaced points
depth_grid <- seq(0, max(df$Depth), length.out = 200)
interp_result <- interp(
x = time_numeric,
y = df$Depth,
z = df[[varname]],
xo = time_grid,
yo = depth_grid,
duplicate = "mean",
linear = TRUE,
extrap = TRUE
)
expand.grid(x = interp_result$x, y = interp_result$y) %>%
mutate(
SamplingDateTime = ymd_hm("2025-06-04 15:30") + dhours(x),
Depth = y,
!!varname := as.vector(interp_result$z)
) %>%
select(SamplingDateTime, Depth, all_of(varname))
}
df_temp <- interpolate_var(df_all, "Temp")
df_odo  <- interpolate_var(df_all, "ODO.1")
df_orp  <- interpolate_var(df_all, "ORP")
df_pH   <- interpolate_var(df_all, "pH")
df_turb <- interpolate_var(df_all, "Turbidity")
make_heatmap_clean <- function(df, var, var_label, title = NULL, limits = NULL) {
time_seq <- seq(from = ymd_hm("2025-06-04 16:00"),
to   = ymd_hm("2025-06-06 16:00"),
by   = "4 hours")
ggplot(df, aes(x = SamplingDateTime, y = Depth, fill = .data[[var]])) +
geom_tile() +
scale_y_reverse(
breaks = seq(0, 7.3, by = 1),
limits = c(7.3, 0),
expand = c(0, 0)
) +
scale_x_datetime(
breaks = time_seq,
labels = format(time_seq, "%H:%M"),
limits = c(ymd_hm("2025-06-04 16:00"), ymd_hm("2025-06-06 16:00") + dhours(1)),
expand = c(0, 0)
) +
scale_fill_gradientn(
colours = c("#440154", "#3b528b", "#21908d", "#5dc963", "#fde725", "orange", "red"),
name = var_label,
limits = limits,
oob = scales::squish,
na.value = "gray80"
) +
labs(
title = title,
x = NULL,
y = "Depth (m)"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "right"
)
}
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 300))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 350))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 325))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 310))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 10))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 310))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
# Combine into a 2x2 grid with separate legends
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 9))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 310))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
# Combine into a 2x2 grid with separate legends
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
p_temp <- make_heatmap_clean(df_temp, "Temp", "Temp (°C)", "A. Temperature", limits = c(4, 22))
p_odo  <- make_heatmap_clean(df_odo, "ODO.1", "DO (mg/L)", "B. Dissolved Oxygen", limits = c(0, 8.5))
p_orp  <- make_heatmap_clean(df_orp, "ORP", "ORP (mV)", "C. ORP", limits = c(-100, 310))
p_pH   <- make_heatmap_clean(df_pH, "pH", "pH", "D. pH", limits = c(4, 6))
p_turb <- make_heatmap_clean(df_turb, "Turbidity", "Turbidity (FNU)", "E. Turbidity", limits = c(0, 500))
# Combine into a 2x2 grid with separate legends
combined_plot_heatmap <- (p_temp | p_odo) / (p_orp | p_pH) +
plot_layout(guides = "keep")
print(combined_plot_heatmap)
